import { ClassSignature, FileSignature, MethodSignature } from '../model/ArkSignature';
import { ClassType } from '../base/Type';
export declare class Builtin {
    static OBJECT: string;
    static ARRAY: string;
    static SET: string;
    static MAP: string;
    static REGEXP: string;
    static BUILT_IN_CLASSES: Set<string>;
    static DUMMY_PROJECT_NAME: string;
    static DUMMY_FILE_NAME: string;
    static BUILT_IN_CLASSES_FILE_SIGNATURE: FileSignature;
    static OBJECT_CLASS_SIGNATURE: ClassSignature;
    static OBJECT_CLASS_TYPE: ClassType;
    static ARRAY_CLASS_SIGNATURE: ClassSignature;
    static SET_CLASS_SIGNATURE: ClassSignature;
    static MAP_CLASS_SIGNATURE: ClassSignature;
    static REGEXP_CLASS_SIGNATURE: ClassSignature;
    static REGEXP_CLASS_TYPE: ClassType;
    static BUILT_IN_CLASS_SIGNATURE_MAP: Map<string, ClassSignature>;
    static ITERATOR_FUNCTION: string;
    static ITERATOR: string;
    static ITERATOR_NEXT: string;
    static ITERATOR_RESULT: string;
    static ITERATOR_RESULT_DONE: string;
    static ITERATOR_RESULT_VALUE: string;
    static ITERATOR_CLASS_SIGNATURE: ClassSignature;
    static ITERATOR_RESULT_CLASS_SIGNATURE: ClassSignature;
    static ITERATOR_CLASS_TYPE: ClassType;
    static ITERATOR_RESULT_CLASS_TYPE: ClassType;
    static TO_STRING: string;
    static TO_STRING_METHOD_SIGNATURE: MethodSignature;
    static SLICE: string;
    static CONCAT: string;
    private static buildBuiltInClasses;
    private static buildBuiltInClassesFileSignature;
    static buildBuiltInClassSignature(className: string): ClassSignature;
    private static buildBuiltInClassSignatureMap;
    static isBuiltinClass(className: string): boolean;
}
//# sourceMappingURL=Builtin.d.ts.map